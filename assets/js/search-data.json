{
  
    
        "post0": {
            "title": "Debugging in Jupyter notebooks",
            "content": "Intro . I have used Jupyter notebooks pretty extensively for personal projects and research experiments. But sometimes after I take an extended break from coding I find myself forgetting some of the details about how debuggers work within Jupyter notebooks. This post is mostly a reminder for myself of how to use debuggers in a notebook but hopefully it can also help others who need the same reminder. . Throughout this notebook, we will be using ipdb instead of python&#39;s built-in pdb. ipdb builds upon pdb and offers better syntax highlighting among other features. . First, we will make sure that ipdb will be used by default instead of pdb by setting the environment variable (if it isn&#39;t set already). . %set_env PYTHONBREAKPOINT=IPython.core.debugger.set_trace . env: PYTHONBREAKPOINT=IPython.core.debugger.set_trace . Setting a breakpoint within the notebook . Until python 3.7, there was only one way of setting a breakpoint in a python script. Fortunately, python 3.7 introduced the breakpoint() function with PEP 553 that makes it more convenient to set a breakpoint. . Prior to 3.7, you had to import the debugger and call set_trace(): . def foo(): print(&quot;before breakpoint&quot;) from IPython.core.debugger import set_trace; set_trace() print(&quot;after breakpoint&quot;) return foo() . before breakpoint &gt; &lt;ipython-input-2-fe3f7a7ecf85&gt;(4)foo() 2 print(&#34;before breakpoint&#34;) 3 from IPython.core.debugger import set_trace; set_trace() -&gt; 4 print(&#34;after breakpoint&#34;) 5 return 6 . after breakpoint . Fortunately, starting with python 3.7 you can do the same thing with breakpoint(). Note that python will look at the PYTHONBREAKPOINT environment variable to determine which debugger to drop into. This is why we set this variable early on. . def foo(): print(&quot;before breakpoint&quot;) breakpoint() print(&quot;after breakpoint&quot;) return foo() . before breakpoint &gt; &lt;ipython-input-3-c1ae806f7763&gt;(4)foo() 2 print(&#34;before breakpoint&#34;) 3 breakpoint() -&gt; 4 print(&#34;after breakpoint&#34;) 5 return 6 . after breakpoint . Debugging exceptions post-mortem . Jupyter notebooks allow you to do post-mortem debugging by dropping the debugger into the code leading up an unhandled exception. This is very useful when developing code because it allows you to examine the logic around the exception without having to manually set a breakpoint yourself. All you need to do is the line magic %debug . def bar(): print(&quot;This function is about to fail with an error&quot;) raise ValueError . bar() . This function is about to fail with an error . ValueError Traceback (most recent call last) &lt;ipython-input-5-226d01f48125&gt; in &lt;module&gt; -&gt; 1 bar() &lt;ipython-input-4-e0c38ffbca4e&gt; in bar() 1 def bar(): 2 print(&#34;This function is about to fail with an error&#34;) -&gt; 3 raise ValueError ValueError: . Now we use the next cell to drop into the code right before the exception to examine the cause post-mortem. . %debug . &gt; &lt;ipython-input-4-e0c38ffbca4e&gt;(3)bar() 1 def bar(): 2 print(&#34;This function is about to fail with an error&#34;) -&gt; 3 raise ValueError . You can also use the cell magic %%debug instead of breakpoint() at the top of a cell. However, I have never used %%debug because it seems to debug the execution of the cell by the notebook which causes some information to be hidden. . %%debug print(&quot;You won&#39;t see the code for this line in the stack trace&quot;) bar() . NOTE: Enter &#39;c&#39; at the ipdb&gt; prompt to continue execution. &gt; &lt;string&gt;(2)&lt;module&gt;() . You won&#39;t see the code for this line in the stack trace &gt; &lt;string&gt;(3)&lt;module&gt;() . This function is about to fail with an error ValueError &gt; &lt;string&gt;(3)&lt;module&gt;() . &gt; &lt;ipython-input-4-e0c38ffbca4e&gt;(3)bar() 1 def bar(): 2 print(&#34;This function is about to fail with an error&#34;) -&gt; 3 raise ValueError . ValueError Traceback (most recent call last) &lt;ipython-input-4-e0c38ffbca4e&gt; in bar() 1 def bar(): 2 print(&#34;This function is about to fail with an error&#34;) -&gt; 3 raise ValueError ValueError: .",
            "url": "https://keawang.github.io/lower-the-entropy/jupyter/notes/2020/03/30/Debugging-in-Jupyter.html",
            "relUrl": "/jupyter/notes/2020/03/30/Debugging-in-Jupyter.html",
            "date": " â€¢ Mar 30, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "See my homepage for information about me. .",
          "url": "https://keawang.github.io/lower-the-entropy/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  
  

  

  
  

  

  
      ,"page8": {
          "title": "",
          "content": "Warning . Do not manually save images into this folder. This is used by GitHub Actions to automatically copy images. Any images you save into this folder could be deleted at build time. .",
          "url": "https://keawang.github.io/lower-the-entropy/images/copied_from_nb/",
          "relUrl": "/images/copied_from_nb/",
          "date": ""
      }
      
  

  
  

}